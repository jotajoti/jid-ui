{"version":3,"sources":["logo_50x50.png","locales/da/messages.js","App.js","config.js","serviceWorker.js","index.js","intl.js"],"names":["module","exports","languageData","n","ord","s","String","split","i","t0","Number","messages","a","App","withStyles","root","display","appBar","colorPrimary","title","marginLeft","flexGrow","content","paddingTop","flex","box","boxHeader","statNumber","textAlign","totals","padding","new","backgroundColor","props","classes","useState","jids","unique","countries","users","stats","setStats","loading","setLoading","countryMap","reduce","lookupMap","country","code","name","useEffect","fetchStats","body","mockResponse","then","setInterval","newCountryIndicator","moment","subtract","className","AppBar","position","color","Toolbar","src","logoImage","height","alt","Typography","variant","Grid","container","spacing","item","xs","Paper","alignItems","justify","direction","Map","center","zoom","GeoJSON","data","geoJson","style","feature","countryCode","iso3to2","id","toLowerCase","statsCountry","firstCreated","created","weight","fillColor","isBefore","Table","size","TableHead","TableRow","TableCell","align","TableBody","map","user","key","component","scope","newlyCreated","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","usersLocale","navigator","language","catalogs","da","children","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6708d8e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_50x50.c2e75483.png\";","/* eslint-disable */module.exports={languageData:{\"plurals\":function(n,ord){var s=String(n).split(\".\"),i=s[0],t0=Number(s[0])==n;if(ord)return\"other\";return n==1||!t0&&(i==0||i==1)?\"one\":\"other\"}},messages:{\"Countries\":\"Lande\",\"Country name\":\"Landenavn\",\"Loading\":\"Indl\\xE6ser\",\"Name\":\"Navn\",\"Scoreboard\":\"Stillinger\",\"Total number of JID codes: {0}\":function(a){return[\"Total antal JID koder: \",a(\"0\")]},\"Unique JID codes: {0}\":function(a){return[\"Unikke JID koder: \",a(\"0\")]},\"Unique codes\":\"Unikke koder\",\"Unique countries: {0}\":function(a){return[\"Unikke lande: \",a(\"0\")]}}};","import React, {useEffect, useState} from 'react';\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Grid from \"@material-ui/core/Grid\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {GeoJSON, Map} from \"react-leaflet\";\nimport iso3to2 from 'country-iso-3-to-2';\nimport geoJson from './geojson/countries.geo';\nimport moment from 'moment';\nimport {Trans} from \"@lingui/macro\";\n\nimport logoImage from './logo_50x50.png';\nimport countries from './countries';\nimport {newCountryTime} from \"./config\";\nimport mockResponse from './mockresponse';\n\nconst styles = {\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        colorPrimary: '#FFFFFF'\n    },\n    title: {\n        marginLeft: 24,\n        flexGrow: 1,\n    },\n    content: {\n        paddingTop: 70,\n        flex: 1,\n    },\n    box: {\n        paddingTop: 8,\n    },\n    boxHeader: {\n        marginLeft: 16,\n    },\n    statNumber: {\n        textAlign: 'right'\n    },\n    totals: {\n        padding: 8\n    },\n    new: {\n        backgroundColor: '#FFFF00'\n    }\n};\n\nexport const App = withStyles(styles)(props => {\n    const {classes} = props;\n\n    const [stats, setStats] = useState({totals: {jids: 0, unique: 0, countries: 0}, users: [], countries: []});\n    const [loading, setLoading] = useState(true);\n\n    const countryMap = countries.reduce((lookupMap, country) => {\n        lookupMap[country.code] = country.name;\n        return lookupMap;\n    }, {});\n\n    useEffect(() => {\n        const fetchStats = async () => {\n            //const response = await fetch(serverUrl);\n            //const body = await response.json();\n            const body = mockResponse;\n            body.countryMap = body.countries.reduce((lookupMap, country) => {\n                lookupMap[country.country] = country;\n                return lookupMap;\n            }, {});\n            setStats(body);\n            setLoading(false);\n        };\n        fetchStats().then(() => {\n            setInterval(fetchStats, 5 * 1000);\n        });\n    }, []);\n\n    const center = [30, 10];\n    const newCountryIndicator = moment().subtract(newCountryTime, 'minutes');\n\n    return (\n        <div className={classes.root}>\n            <AppBar position={'fixed'} className={classes.appBar} color=\"default\">\n                <Toolbar>\n                    <img src={logoImage} height={50} alt=\"Jota/Joti 2019\"/>\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n                        Jota/Joti 2019\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <div className={classes.content}>\n                {loading ? (<div><Trans>Loading</Trans></div>) : (\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <Paper className={classes.totals}>\n                                <Grid container alignItems=\"center\" justify=\"space-around\" direction=\"row\">\n                                    <Grid item>\n                                        <Typography variant=\"body2\"><Trans>Total number of JID codes: {stats.totals.jids}</Trans></Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography variant=\"body2\"><Trans>Unique JID codes: {stats.totals.unique}</Trans></Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Typography variant=\"body2\"><Trans>Unique countries: {stats.totals.countries}</Trans></Typography>\n                                    </Grid>\n                                </Grid>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <Paper>\n                                <Map center={center} zoom={2}>\n                                    <GeoJSON data={geoJson} style={feature => {\n                                        const countryCode = iso3to2(feature.id) ? iso3to2(feature.id).toLowerCase() : null;\n                                        const statsCountry = stats.countryMap[countryCode];\n                                        const firstCreated = statsCountry ? moment(statsCountry.created) : null;\n                                        const newlyCreated = firstCreated && newCountryIndicator.isBefore(firstCreated);\n                                        return {\n                                            weight: 1,\n                                            color: '#8a8a8a',\n                                            fillColor: newlyCreated ? '#FFFF00' : statsCountry ? '#0000FF' : '#888888'\n                                        };\n                                    }}/>\n                                </Map>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper className={classes.box}>\n                                <Typography variant=\"h6\" className={classes.boxHeader}><Trans>Scoreboard</Trans></Typography>\n                                <Table size=\"small\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell><Trans>Name</Trans></TableCell>\n                                            <TableCell align=\"right\"><Trans>Countries</Trans></TableCell>\n                                            <TableCell align=\"right\"><Trans>Unique codes</Trans></TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {stats.users.map(user => (\n                                            <TableRow key={user.name}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {user.name}\n                                                </TableCell>\n                                                <TableCell align=\"right\">{user.countries}</TableCell>\n                                                <TableCell align=\"right\">{user.jids}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </Paper>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <Paper className={classes.box}>\n                                <Typography variant=\"h6\" className={classes.boxHeader}><Trans>Countries</Trans></Typography>\n                                <Table size=\"small\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell><Trans>Country name</Trans></TableCell>\n                                            <TableCell align=\"right\"><Trans>Unique codes</Trans></TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {stats.countries.map(country => {\n                                            const firstCreated = moment(country.created);\n                                            const newlyCreated = newCountryIndicator.isBefore(firstCreated);\n                                            return (\n                                                <TableRow key={country.country}\n                                                          className={newlyCreated ? classes.new : ''}>\n                                                    <TableCell component=\"th\" scope=\"row\">\n                                                        {countryMap[country.country.toUpperCase()] ? countryMap[country.country.toUpperCase()] : country.country}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">{country.jids}</TableCell>\n                                                </TableRow>\n                                            );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                )}\n            </div>\n        </div>\n    );\n});\n","export const serverUrl = 'http://192.168.1.236:4000/stats';\nexport const newCountryTime = 30; // minutes old\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Intl} from \"./intl\";\n\nReactDOM.render(<Intl><App/></Intl>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {I18nProvider} from \"@lingui/react\";\nimport da from './locales/da/messages';\n\nexport const Intl = props => {\n    const usersLocale = navigator.language;\n\n    const catalogs = {\n        da\n    };\n\n    return (\n        <I18nProvider language={usersLocale} catalogs={catalogs}>\n            {props.children}\n        </I18nProvider>\n    );\n};\n"],"sourceRoot":""}